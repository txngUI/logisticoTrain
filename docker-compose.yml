name: "logisticotrain"

services:

  restapi:
    image: restapi
    build:
      context: ./RESTApi
      dockerfile: Dockerfile
    ports:
      - 5001:5001
    depends_on:
      sqldatabase:
        condition: service_healthy
      nosqldatabase:
        condition: service_healthy
    networks:
      - db-net
    environment:
      - SQLDB_HOST=sqldatabase
      - MONGODB_HOST=nosqldatabase
    volumes:
      - ./RESTApi/config.py:/app/config.py
      - ./init-mariadb.sql:/docker-entrypoint-initdb.d/init-mariadb.sql
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/api/v1/rames" ]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 20s
    configs:
      - source: init-sql-db
        target: /docker-entrypoint-initdb.d/init-mariadb.sql

  sqldatabase:
    image: mariadb:11
    networks:
      - db-net
    environment:
      MARIADB_DATABASE: myrames-prod-db
      MARIADB_USER: mariaUsr
      MARIADB_PASSWORD: mariaPwd
      MARIADB_ROOT_PASSWORD: rootkjkj
    ports:
      - 3306:3306
    volumes:
      - sqldb-data:/var/lib/mysql
    restart: always
    healthcheck:
      test: [ "CMD", "/usr/local/bin/healthcheck.sh", "--connect" ]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 20s

  phpmyadmin:
    image: phpmyadmin:5
    profiles:
      - dev-tool
    depends_on:
      - sqldatabase
    restart: always
    environment:
      PMA_HOST: sqldatabase
      PMA_PORT: 3306
      PMA_USER: mariaUsr
      PMA_PASSWORD: mariaPwd
    ports:
      - "127.0.0.1:8888:80"
    networks:
      - db-net

  broker:
    image: rabbitmq:3.12
    networks:
      - broker-net
    container_name: broker
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_PASS: brokerpass
      RABBITMQ_DEFAULT_USER: brokerusr
    restart: always
    command: >
      sh -c "rabbitmq-plugins enable rabbitmq_stomp &&
             rabbitmq-plugins enable rabbitmq_management &&
             rabbitmq-server"
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 20s

  nosqldatabase:
    image: mongo:6.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongoUsr
      MONGO_INITDB_ROOT_PASSWORD: mongoPass
      MONGO_INITDB_DATABASE: admin
    volumes:
      - history-db:/data/db
    networks:
      - db-net
    ports:
      - 27017:27017
    restart: always
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 10
    configs:
      - source: init-nosql-db
        target: /docker-entrypoint-initdb.d/init-mongo.js

  mongo-express:
    image: mongo-express
    profiles:
      - dev-tool
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: mongoUsr
      ME_CONFIG_MONGODB_ADMINPASSWORD: mongoPass
      ME_CONFIG_MONGODB_URL: mongodb://mongoUsr:mongoPass@nosqldatabase:27017/
      ME_CONFIG_BASICAUTH: false
    networks:
      - db-net
    volumes:
      - ./RESTApi/config.py:/app/config.py:ro

  wsapi:
    image: maven:3.9-amazoncorretto-21
    container_name: wsapi
    volumes:
      - ./LogisticoTrain_codebase/RealtimeAPI:/usr/src/RealtimeAPI
      - ./maven_cache:/root/.m2
    working_dir: /usr/src/RealtimeAPI
    command: >
      sh -c "mvn spring-boot:run"
    depends_on:
      sqldatabase:
        condition: service_healthy
      broker:
        condition: service_healthy
    networks:
      - broker-net
      - front-net
    ports:
      - "8080:8080"

  front:
    image: nginx:1.25-alpine
    restart: always
    configs:
      - source: nginx-conf
        target: /vendorConfigurations/nginx.conf
    volumes:
      - app-static:/var/www/app:ro
    networks:
      - front-net
    depends_on:
      - restapi
      # - wsapi
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 10s
      retries: 10

  webapp:
    image: node:22-alpine
    profiles:
      - build
    working_dir: /app
    volumes:
      - ./app:/app
      - app-static:/app/build
    command: sh -c "npm install && npm run build"
    networks:
      - front-net

networks:
  front-net:
  broker-net:
  db-net:

volumes:
  sqldb-data:
  history-db:
  app-static:

configs:
  nginx-conf:
    file: ./nginx.conf
  init-nosql-db:
    file: ./init-mongo.js
  init-sql-db:
    file: ./init-mariadb.sql